spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:8000/user_service}
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.flyway.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.flyway.user=${SPRING_DATASOURCE_USERNAME:postgres}
spring.flyway.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:8000/user_service}
spring.flyway.locations=classpath:db/migration

spring.jpa.hibernate.ddl-auto=validate

eureka.client.serviceUrl.defaultZone=${SPRING_DISCOVERY_DEFAULT_ZONE:http://localhost:8181/eureka}
spring.application.name=user-service
server.port=8080
eureka.instance.prefer-ip-address=true
eureka.instance.ip-address=${HOST:localhost}

eureka.instance.instanceId=${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}

logging.pattern.level= "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

spring.kafka.bootstrap-servers=${SPRING_KAFKA_HOST:localhost:29092}
spring.kafka.consumer.bootstrap-servers=${SPRING_KAFKA_HOST:localhost:29092}
spring.kafka.producer.bootstrap-servers=${SPRING_KAFKA_HOST:localhost:29092}
spring.kafka.consumer.group-id=orderId
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=created:ru.nsu.fit.directors.userservice.event.OrderCreatedEvent,cancelled:ru.nsu.fit.directors.userservice.event.OrderCancelledEvent,confirmed:ru.nsu.fit.directors.userservice.event.OrderConfirmedEvent,user-message:ru.nsu.fit.directors.userservice.event.UserMessageEvent
spring.kafka.template.default-topic=orderTopic

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=notification:ru.nsu.fit.directors.userservice.event.OrderNotificationEvent,business-message:ru.nsu.fit.directors.userservice.event.BusinessMessageEvent,user-message:ru.nsu.fit.directors.userservice.event.UserMessageEvent
spring.kafka.consumer.properties.spring.json.trusted.packages=*

springdoc.swagger-ui.path=/user/swagger-ui.html
springdoc.api-docs.path=/user/api-docs
server.servlet.session.cookie.same-site=none
server.servlet.session.cookie.http-only=false
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.name=JSESSIONID_${spring.application.name}


security.jwt.secret=${JWT_SECRET:secret}
security.jwt.regular.access-token-validity-seconds=${JWT_ACCESS_TOKEN_SEC:3000}
security.jwt.regular.refresh-token-validity-days=${JWT_REFRESH_TOKEN_DAYS:14}
security.jwt.header-alg=HS256

security.jwt.key-claims.user-id=${JWT_KEY_USER_ID:userID}
security.jwt.key-claims.user-role=${JWT_KEY_USER_ROLE:role}
security.jwt.key-claims.session-id=${JWT_KEY_SESSION_ID:sessionID}


vk.api.service-key=${VK_SERVICE_KEY: 0}


management.endpoints.web.exposure.include=*
